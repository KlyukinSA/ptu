# 1

## Выполните установку утилит john и hashcat

stepan@dexp:~$ su -
Password: 
root@dexp:~# apt install john
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following packages were automatically installed and are no longer required:
  mencoder xjadeo zsh-common
Use 'apt autoremove' to remove them.
The following additional packages will be installed:
  john-data
The following NEW packages will be installed:
  john john-data
0 upgraded, 2 newly installed, 0 to remove and 480 not upgraded.
Need to get 4 773 kB of archives.
After this operation, 7 885 kB of additional disk space will be used.
Do you want to continue? [Y/n] 
Get:1 http://archive.ubuntu.com/ubuntu jammy/main amd64 john-data all 1.8.0-4ubuntu3 [4 561 kB]
Get:2 http://archive.ubuntu.com/ubuntu jammy/main amd64 john amd64 1.8.0-4ubuntu3 [212 kB]
Fetched 4 773 kB in 2s (2 968 kB/s)
Selecting previously unselected package john-data.
(Reading database ... 593006 files and directories currently installed.)
Preparing to unpack .../john-data_1.8.0-4ubuntu3_all.deb ...
Unpacking john-data (1.8.0-4ubuntu3) ...
Selecting previously unselected package john.
Preparing to unpack .../john_1.8.0-4ubuntu3_amd64.deb ...
Unpacking john (1.8.0-4ubuntu3) ...
Setting up john-data (1.8.0-4ubuntu3) ...
Setting up john (1.8.0-4ubuntu3) ...
Processing triggers for man-db (2.10.2-1) ...
root@dexp:~# john
Created directory: /root/.john
John the Ripper password cracker, version 1.8.0
Copyright (c) 1996-2013 by Solar Designer
Homepage: http://www.openwall.com/john/

Usage: john [OPTIONS] [PASSWORD-FILES]
--single                   "single crack" mode
--wordlist=FILE --stdin    wordlist mode, read words from FILE or stdin
--rules                    enable word mangling rules for wordlist mode
--incremental[=MODE]       "incremental" mode [using section MODE]
--external=MODE            external mode or word filter
--stdout[=LENGTH]          just output candidate passwords [cut at LENGTH]
--restore[=NAME]           restore an interrupted session [called NAME]
--session=NAME             give a new session the NAME
--status[=NAME]            print status of a session [called NAME]
--make-charset=FILE        make a charset, FILE will be overwritten
--show                     show cracked passwords
--test[=TIME]              run tests and benchmarks for TIME seconds each
--users=[-]LOGIN|UID[,..]  [do not] load this (these) user(s) only
--groups=[-]GID[,..]       load users [not] of this (these) group(s) only
--shells=[-]SHELL[,..]     load users with[out] this (these) shell(s) only
--salts=[-]N               load salts with[out] at least N passwords only
--save-memory=LEVEL        enable memory saving, at LEVEL 1..3
--node=MIN[-MAX]/TOTAL     this node's number range out of TOTAL count
--fork=N                   fork N processes
--format=NAME              force hash type NAME: descrypt/bsdicrypt/md5crypt/
                           bcrypt/LM/AFS/tripcode/dummy/crypt

## Скачайте типовой словарь rockyou, воспользовавшись ссылкой, приведенной выше

stepan@dexp:~/6sem/zi/6$ wget http://scrapmaker.com/data/wordlists/dictionaries/rockyou.txt
--2024-12-04 22:37:32--  http://scrapmaker.com/data/wordlists/dictionaries/rockyou.txt
Resolving scrapmaker.com (scrapmaker.com)... 192.254.232.166
Connecting to scrapmaker.com (scrapmaker.com)|192.254.232.166|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 139921497 (133M) [text/plain]
Saving to: ‘rockyou.txt’

rockyou.txt       100%[=============>] 133,44M  4,33MB/s    in 25s     

2024-12-04 22:37:58 (5,29 MB/s) - ‘rockyou.txt’ saved [139921497/139921497]

stepan@dexp:~/6sem/zi/6$ head rockyou.txt 
123456
12345
123456789
password
iloveyou
princess
1234567
rockyou
12345678
abc123

## Протестируйте скорость работы hashcat, сравните его скорость для различных хэш-алгоритмов

укажем позже

# 2

## Убедитесь в присутствии в используемом словаре следующих слов:

- 17barb1e
- suriken77
- 007potatoice

stepan@dexp:~/6sem/zi/6$ grep 17barb1e rockyou.txt 
17barb1e
stepan@dexp:~/6sem/zi/6$ grep suriken77 rockyou.txt 
suriken77
stepan@dexp:~/6sem/zi/6$ grep 007potatoice rockyou.txt 
007potatoice

## Сгенерируйте хэши MD5 для этих слов и сохраните их в файл, как было показано в примерах выше

echo -n "17barb1e" | md5sum | cut -f1 -d' ' > hashes.md5
echo -n "suriken77" | md5sum | cut -f1 -d' ' >> hashes.md5
echo -n "007potatoice" | md5sum | cut -f1 -d' ' >> hashes.md5
stepan@dexp:~/6sem/zi/6$ cat hashes.md5 
bb1b8d51f3f2c158a90c6ae7c0e6ad49
d8e5777eebaf928e64f8c9000c2c12f7
c78bf6fb1d6c41ea2b96962772838ebf

## При помощи hashcat выполните восстановление паролей из образов. Результат восстановления сохраните в файл result.md5

sysadmin@deb10-1:~/infsec/lab6hashcat$ hashcat -O -m 0 -a 0 -o result.md5 hashes.md5 rockyou.txt
hashcat (v6.1.1) starting...

OpenCL API (OpenCL 1.2 pocl 1.6, None+Asserts, LLVM 9.0.1, RELOC, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]
=============================================================================================================================
* Device #1: pthread-AMD FX-8320E Eight-Core Processor, 668/732 MB (256 MB allocatable), 1MCU

Minimum password length supported by kernel: 0
Maximum password length supported by kernel: 31

Hashes: 3 digests; 3 unique digests, 1 unique salts
Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates
Rules: 1

Applicable optimizers applied:
* Optimized-Kernel
* Zero-Byte
* Precompute-Init
* Meet-In-The-Middle
* Early-Skip
* Not-Salted
* Not-Iterated
* Single-Salt
* Raw-Hash

Watchdog: Hardware monitoring interface not found on your system.
Watchdog: Temperature abort trigger disabled.

Host memory required for this attack: 64 MB

Dictionary cache built:
* Filename..: rockyou.txt
* Passwords.: 14344391
* Bytes.....: 139921497
* Keyspace..: 14344384
* Runtime...: 3 secs

                                                 
Session..........: hashcat
Status...........: Cracked
Hash.Name........: MD5
Hash.Target......: hashes.md5
Time.Started.....: Wed Dec  4 22:56:57 2024 (39 secs)
Time.Estimated...: Wed Dec  4 22:57:36 2024 (0 secs)
Guess.Base.......: File (rockyou.txt)
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........:   370.7 kH/s (2.44ms) @ Accel:1024 Loops:1 Thr:1 Vec:8
Recovered........: 3/3 (100.00%) Digests
Progress.........: 14261164/14344384 (99.42%)
Rejected.........: 2988/14261164 (0.02%)
Restore.Point....: 14260140/14344384 (99.41%)
Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1
Candidates.#1....: 008008672 -> 0079066l

Started: Wed Dec  4 22:56:50 2024
Stopped: Wed Dec  4 22:57:37 2024
sysadmin@deb10-1:~/infsec/lab6hashcat$ ls
hashes.md5  result.md5  rockyou.txt
sysadmin@deb10-1:~/infsec/lab6hashcat$ cat result.md5 
d8e5777eebaf928e64f8c9000c2c12f7:suriken77
bb1b8d51f3f2c158a90c6ae7c0e6ad49:17barb1e
c78bf6fb1d6c41ea2b96962772838ebf:007potatoice

# 3

## Возьмите 5 случайных парольных комбинаций, присутствующих в используемом словаре (проверьте), но не используемых ранее в примерах и заданиях.

sysadmin@deb10-1:~/infsec/lab6hashcat$ python3 gen.py 
zch1234
pcoffy
neonstreets
fangydf
23242525

## Сгенерируйте хэши SHA512 для этих слов и сохраните их в файл, как было показано в примерах выше. Команду генерации кэшей найдите самостоятельно.

sysadmin@deb10-1:~/infsec/lab6hashcat$ find /usr/bin -type f -name '*sum'
/usr/bin/shasum
/usr/bin/cksum
/usr/bin/sum
/usr/bin/sha256sum
/usr/bin/sha224sum
/usr/bin/b2sum
/usr/bin/sha384sum
/usr/bin/sha1sum
/usr/bin/sha512sum
/usr/bin/md5sum

sysadmin@deb10-1:~/infsec/lab6hashcat$ while read p; do   echo -n "$p" | sha512sum | cut -f1 -d' ' >> hashes2.sha512; done < origin.txt
sysadmin@deb10-1:~/infsec/lab6hashcat$ cat hashes2.sha512 
57462d2e5c601a9bd5cc9e5fd2ab8ba1f738c9caf07fdc9a8ae479b2944d360306996fc775bf44e16736cce023b6a7afbcc3aaa724d6e4d6bc8573bb918b4058
29af629622488b7c069d95ad1b9d2156ae953540db91f09a9ba2d48f5a47344ee894d349c256beeca2f0797ec37ee6353c9f9281bf18dcecb64fb00574ced470
cc663aadafef53819427ac1a688424c200b0c3602a5fac51f45cc681c0779953ce7cd0d947775e2eb02e5dd22c1003f147901d2e0c8edbe4025b1a3a01035a74
5d32cfc15747a6b1ccc0cdc637328e7058ffff867cf9f4a4918e0ad28f43529d635018dc51015b511c94cfb6851410de12006ce1820a588e3fcde1393a9a1698
b19c4da20f309f79b6a1415b21f19fd254e216e841baecb92a2a21bfa02e5f1ee605dfe98d6d5d39089848cfb9f70f285d89407ca60b3b1583b896725c8ecc6c
cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e

## При помощи hashcat выполните восстановление паролей из образов. Значение параметра -m для восстановления образов SHA512 определите по man странице утилиты hashcat

sysadmin@deb10-1:~/infsec/lab6hashcat$ man hashcat
       1700 = SHA512
       1710 = sha512($pass.$salt)
       1720 = sha512($salt.$pass)
       1730 = sha512(unicode($pass).$salt)
       1740 = sha512($salt.unicode($pass))
       1750 = HMAC-SHA512 (key = $pass)
       1760 = HMAC-SHA512 (key = $salt)
       1800 = SHA-512(Unix)
sysadmin@deb10-1:~/infsec/lab6hashcat$ hashcat -O -m 1700 -a 0 -o result2.sha512 hashes2.sha512 rockyou.txt
hashcat (v6.1.1) starting...

OpenCL API (OpenCL 1.2 pocl 1.6, None+Asserts, LLVM 9.0.1, RELOC, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]
=============================================================================================================================
* Device #1: pthread-AMD FX-8320E Eight-Core Processor, 668/732 MB (256 MB allocatable), 1MCU

Minimum password length supported by kernel: 0
Maximum password length supported by kernel: 31

Hashes: 6 digests; 6 unique digests, 1 unique salts
Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates
Rules: 1

Applicable optimizers applied:
* Optimized-Kernel
* Zero-Byte
* Precompute-Init
* Early-Skip
* Not-Salted
* Not-Iterated
* Single-Salt
* Raw-Hash
* Uses-64-Bit

Watchdog: Hardware monitoring interface not found on your system.
Watchdog: Temperature abort trigger disabled.

Host memory required for this attack: 64 MB

Dictionary cache hit:
* Filename..: rockyou.txt
* Passwords.: 14344384
* Bytes.....: 139921497
* Keyspace..: 14344384

                                                 
Session..........: hashcat
Status...........: Cracked
Hash.Name........: SHA2-512
Hash.Target......: hashes2.sha512
Time.Started.....: Wed Dec  4 23:45:31 2024 (46 secs)
Time.Estimated...: Wed Dec  4 23:46:17 2024 (0 secs)
Guess.Base.......: File (rockyou.txt)
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........:   279.0 kH/s (3.34ms) @ Accel:1024 Loops:1 Thr:1 Vec:4
Recovered........: 6/6 (100.00%) Digests
Progress.........: 12844850/14344384 (89.55%)
Rejected.........: 2866/12844850 (0.02%)
Restore.Point....: 12843826/14344384 (89.54%)
Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1
Candidates.#1....: 2324zero -> 232308250426

Started: Wed Dec  4 23:44:53 2024
Stopped: Wed Dec  4 23:46:18 2024
sysadmin@deb10-1:~/infsec/lab6hashcat$ cat result
result2.sha512  result.md5      
sysadmin@deb10-1:~/infsec/lab6hashcat$ cat result2.sha512 
cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e:
57462d2e5c601a9bd5cc9e5fd2ab8ba1f738c9caf07fdc9a8ae479b2944d360306996fc775bf44e16736cce023b6a7afbcc3aaa724d6e4d6bc8573bb918b4058:zch1234
29af629622488b7c069d95ad1b9d2156ae953540db91f09a9ba2d48f5a47344ee894d349c256beeca2f0797ec37ee6353c9f9281bf18dcecb64fb00574ced470:pcoffy
cc663aadafef53819427ac1a688424c200b0c3602a5fac51f45cc681c0779953ce7cd0d947775e2eb02e5dd22c1003f147901d2e0c8edbe4025b1a3a01035a74:neonstreets
5d32cfc15747a6b1ccc0cdc637328e7058ffff867cf9f4a4918e0ad28f43529d635018dc51015b511c94cfb6851410de12006ce1820a588e3fcde1393a9a1698:fangydf
b19c4da20f309f79b6a1415b21f19fd254e216e841baecb92a2a21bfa02e5f1ee605dfe98d6d5d39089848cfb9f70f285d89407ca60b3b1583b896725c8ecc6c:23242525

видно что sha512 занял 46 secs в то время как md5 39 secs

## Результат восстановления сохраните в файл result.sha512

sysadmin@deb10-1:~/infsec/lab6hashcat$ mv result2.sha512 result.sha512

# 4

## Создайте с использованием генератора псевдослучайных чисел 4 парольные комбинации, длиной по 5 символов каждая, не используемых ранее в примерах и заданиях.

sysadmin@deb10-1:~/infsec/lab6hashcat$ dd if=/dev/urandom bs=1 count=20 | base64
20+0 записей получено
20+0 записей отправлено
uyqxJnDlz8F344Y5pZqOcitQrx8=
20 байт скопировано, 0,000705671 s, 28,3 kB/s

uyqxJ
nDlz8
F344Y
5pZqO

## Проверьте их отсутствие в используемом словаре.

sysadmin@deb10-1:~/infsec/lab6hashcat$ grep uyqxJ rockyou.txt
grep nDlz8 rockyou.txt
grep F344Y rockyou.txt
grep 5pZqO rockyou.txt

## Сгенерируйте хэши MD5 для этих слов и сохраните их в файл, по аналогии с предыдущими заданиями.

echo -n "uyqxJ" | md5sum | cut -d' ' -f1 >> random-hashes.md5
echo -n "nDlz8" | md5sum | cut -d' ' -f1 >> random-hashes.md5
echo -n "F344Y" | md5sum | cut -d' ' -f1 >> random-hashes.md5
echo -n "5pZqO" | md5sum | cut -d' ' -f1 >> random-hashes.md5

sysadmin@deb10-1:~/infsec/lab6hashcat$ cat random-hashes.md5 
0fa452da11b4bb01181f6318ad7a75f1
089b1158a249ca0248a99af98be6a2fb
27fc6090282dafab01a249c3a7cc61bb
cc10ed12961964cc2eb34822705d1ceb

## При помощи hashcat выполните восстановление паролей из образов. Результат восстановления сохраните в файл result-random.md5

hashcat -O -m 0 -a 3 -o result-random.md5 random-hashes.md5 ?a?a?a?a?a

hashcat (v6.1.1) starting...

OpenCL API (OpenCL 1.2 pocl 1.6, None+Asserts, LLVM 9.0.1, RELOC, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]
=============================================================================================================================
* Device #1: pthread-AMD FX-8320E Eight-Core Processor, 668/732 MB (256 MB allocatable), 1MCU

Minimum password length supported by kernel: 0
Maximum password length supported by kernel: 55

Hashes: 4 digests; 4 unique digests, 1 unique salts
Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates

Applicable optimizers applied:
* Optimized-Kernel
* Zero-Byte
* Precompute-Init
* Meet-In-The-Middle
* Early-Skip
* Not-Salted
* Not-Iterated
* Single-Salt
* Brute-Force
* Raw-Hash

Watchdog: Hardware monitoring interface not found on your system.
Watchdog: Temperature abort trigger disabled.

Host memory required for this attack: 64 MB

                                                 
Session..........: hashcat
Status...........: Cracked
Hash.Name........: MD5
Hash.Target......: random-hashes.md5
Time.Started.....: Thu Dec  5 00:10:49 2024 (3 mins, 20 secs)
Time.Estimated...: Thu Dec  5 00:14:09 2024 (0 secs)
Guess.Mask.......: ?a?a?a?a?a [5]
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........: 27966.4 kH/s (3.23ms) @ Accel:1024 Loops:95 Thr:1 Vec:8
Recovered........: 4/4 (100.00%) Digests
Progress.........: 5437271040/7737809375 (70.27%)
Rejected.........: 0/5437271040 (0.00%)
Restore.Point....: 57233408/81450625 (70.27%)
Restore.Sub.#1...: Salt:0 Amplifier:0-95 Iteration:0-95
Candidates.#1....: s:X$U ->  /%,Y

Started: Thu Dec  5 00:09:56 2024
Stopped: Thu Dec  5 00:14:10 2024
sysadmin@deb10-1:~/infsec/lab6hashcat$ cat result-random.md5
089b1158a249ca0248a99af98be6a2fb:nDlz8
0fa452da11b4bb01181f6318ad7a75f1:uyqxJ
27fc6090282dafab01a249c3a7cc61bb:F344Y
cc10ed12961964cc2eb34822705d1ceb:5pZqO

# загружаем 

- result.md5
- result.sha512
- result-random.md5
